// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/joburl": {
            "get": {
                "description": "Get all job URLs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "joburl"
                ],
                "summary": "Get all job URLs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/joburl.JobUrl"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not fetch job URLs",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new job URL for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "joburl"
                ],
                "summary": "Create a new job URL",
                "parameters": [
                    {
                        "description": "Job URL",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/joburl.JobUrl"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/joburl.JobUrl"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Could not create Job URL",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            }
        },
        "/joburl/{id}": {
            "get": {
                "description": "Get a job URL by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "joburl"
                ],
                "summary": "Get a job URL by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job URL ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/joburl.JobUrl"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "404": {
                        "description": "Job URL not found",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Could not fetch Job URL",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a job URL by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "joburl"
                ],
                "summary": "Update a job URL by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job URL ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job URL",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/joburl.JobUrl"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/joburl.JobUrl"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Could not update Job URL",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a job URL by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "joburl"
                ],
                "summary": "Delete a job URL by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job URL ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Job URL deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "404": {
                        "description": "Job URL not found",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Could not delete Job URL",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Error occurred while retrieving users",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Service not initialized\" \"User not initialized\" \"Unable to create user",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a user by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID\" \"Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Unable to update user",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by ID",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    },
                    "500": {
                        "description": "Unable to delete user",
                        "schema": {
                            "$ref": "#/definitions/exception.CommonException"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "exception.CommonException": {
            "type": "object",
            "properties": {
                "error_details": {
                    "description": "Optional details about the error\n@example \"User ID does not exist\"",
                    "type": "string"
                },
                "message": {
                    "description": "Error message\n@example \"Resource not found\"",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP status code\n@example 404",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The time the error occurred\n@example \"2023-10-09T14:48:00Z\"",
                    "type": "string"
                }
            }
        },
        "joburl.JobUrl": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "priority": {
                    "description": "Default priority set to 'low'",
                    "type": "string"
                },
                "status": {
                    "description": "Status field, e.g., \"pending\", \"completed\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "URL field with a max length of 2048 characters",
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Next Gen Job Hunting API",
	Description:      "Automating resume and cover letter generation, allowing users to easily tailor their applications to specific job opportunities while highlighting their unique skills and experiences.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
