basePath: /api/v1
definitions:
  common.Pagination:
    properties:
      limit:
        description: |-
          Number of items per page, default is 10
          in: query
          default: 10
        type: integer
      order:
        description: |-
          Sort order (asc or desc), default is "asc"
          in: query
          default: asc
        type: string
      page:
        description: |-
          Page number, default is 1
          in: query
          default: 1
        type: integer
      sortBy:
        description: |-
          Field to sort by, default is "id"
          in: query
          default: id
        type: string
      totalItems:
        description: Total number of items
        type: integer
    type: object
  common.PaginationData:
    properties:
      data:
        items: {}
        type: array
      pagination:
        $ref: '#/definitions/common.Pagination'
    type: object
  exception.CommonException:
    properties:
      error_details:
        description: |-
          Optional details about the error
          @example "User ID does not exist"
        type: string
      message:
        description: |-
          Error message
          @example "Resource not found"
        type: string
      status:
        description: |-
          HTTP status code
          @example 404
        type: integer
      timestamp:
        description: |-
          The time the error occurred
          @example "2023-10-09T14:48:00Z"
        type: string
    type: object
  jobpost.EmploymentType:
    enum:
    - Full-time
    - Part-time
    - Contract
    - Internship
    type: string
    x-enum-varnames:
    - FullTime
    - PartTime
    - Contract
    - Internship
  jobpost.JobPost:
    properties:
      applicants:
        description: Number of applicants for the job
        type: integer
      applicationLink:
        description: |-
          URL where applicants can apply for the job
          required: true
        type: string
      atsKeywords:
        description: Keywords for the application tracking system
        type: string
      contractLength:
        description: Duration of the contract, if applicable
        type: string
      createdAt:
        description: Automatically sets the creation timestamp
        type: string
      educationLevel:
        description: Minimum education level required for the job
        type: string
      employmentType:
        allOf:
        - $ref: '#/definitions/jobpost.EmploymentType'
        description: |-
          Type of employment (e.g., full-time, part-time)
          required: true
      hirer:
        description: The company or person responsible for hiring
        type: string
      hirerProfileLink:
        description: Profile link of the hirer (e.g., LinkedIn, company page)
        type: string
      id:
        type: integer
      industry:
        description: Industry related to the job
        type: string
      isRequireUSAPerson:
        description: Indicates if the person must be a U.S. citizen or permanent resident
        type: boolean
      isSecurityClearanceRequired:
        description: Indicates if security clearance is required
        type: boolean
      jobDescription:
        description: |-
          Detailed description of the job
          required: true
        type: string
      jobId:
        description: |-
          Unique identifier for the job post
          required: true
        type: string
      jobPostedDate:
        description: |-
          Date when the job was posted
          required: true
        type: string
      jobTitle:
        description: |-
          Title of the job
          required: true
        type: string
      jobType:
        allOf:
        - $ref: '#/definitions/jobpost.JobType'
        description: |-
          Type of job (e.g., contract, freelance)
          required: true
      location:
        description: Location of the job
        type: string
      minimumExperienceRequired:
        description: Minimum experience required for the job
        type: integer
      requiredSkills:
        description: Skills required for the job
        type: string
      salaryRange:
        description: Salary range for the job
        type: string
      visaSponsorshipDetails:
        description: Visa sponsorship information, if any
        type: string
    type: object
  jobpost.JobPostUserJobPostDto:
    properties:
      applicants:
        description: Number of applicants for the job
        type: integer
      applicationLink:
        description: |-
          URL where applicants can apply for the job
          required: true
        type: string
      appliedAt:
        description: Timestamp when the user applied for the job
        type: string
      atsKeywords:
        description: Keywords for the application tracking system
        type: string
      contractLength:
        description: Duration of the contract, if applicable
        type: string
      coverLetterId:
        description: ID referencing the user's cover letter
        type: integer
      created_at:
        type: string
      createdAt:
        description: Automatically sets the creation timestamp
        type: string
      educationLevel:
        description: Minimum education level required for the job
        type: string
      employmentType:
        allOf:
        - $ref: '#/definitions/jobpost.EmploymentType'
        description: |-
          Type of employment (e.g., full-time, part-time)
          required: true
      hirer:
        description: The company or person responsible for hiring
        type: string
      hirerProfileLink:
        description: Profile link of the hirer (e.g., LinkedIn, company page)
        type: string
      id:
        type: integer
      industry:
        description: Industry related to the job
        type: string
      isEligible:
        description: Whether the user is eligible for the job
        type: boolean
      isRequireUSAPerson:
        description: Indicates if the person must be a U.S. citizen or permanent resident
        type: boolean
      isSecurityClearanceRequired:
        description: Indicates if security clearance is required
        type: boolean
      isStatusHidden:
        description: Flag to indicate if the user wants to hide the job application
          status
        type: boolean
      jobApplicationStatus:
        allOf:
        - $ref: '#/definitions/user_job_post.JobApplicationStatus'
        description: Status of the job application
      jobDescription:
        description: |-
          Detailed description of the job
          required: true
        type: string
      jobId:
        description: |-
          Unique identifier for the job post
          required: true
        type: string
      jobPostId:
        description: Foreign key to job_post table
        type: integer
      jobPostedDate:
        description: |-
          Date when the job was posted
          required: true
        type: string
      jobTitle:
        description: |-
          Title of the job
          required: true
        type: string
      jobType:
        allOf:
        - $ref: '#/definitions/jobpost.JobType'
        description: |-
          Type of job (e.g., contract, freelance)
          required: true
      location:
        description: Location of the job
        type: string
      minimumExperienceRequired:
        description: Minimum experience required for the job
        type: integer
      requiredSkills:
        description: Skills required for the job
        type: string
      resumeId:
        description: ID referencing the user's resume
        type: integer
      resumeScore:
        description: Score given by an ATS for the resume
        type: integer
      salaryRange:
        description: Salary range for the job
        type: string
      updated_at:
        type: string
      userId:
        description: Foreign key to user table
        type: integer
      visaSponsorshipDetails:
        description: Visa sponsorship information, if any
        type: string
    type: object
  jobpost.JobType:
    enum:
    - On-site
    - Remote
    - Hybrid
    type: string
    x-enum-varnames:
    - OnSite
    - Remote
    - Hybrid
  joburl.JobUrl:
    properties:
      created_at:
        type: string
      id:
        type: integer
      priority:
        description: Default priority set to 'low'
        type: string
      status:
        description: Status field, e.g., "pending", "completed"
        type: string
      updated_at:
        type: string
      url:
        description: URL field with a max length of 2048 characters
        type: string
      userId:
        type: integer
    type: object
  user.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  user_job_post.JobApplicationStatus:
    enum:
    - Saved
    - Applied
    - Interview
    - Offered
    - Rejected
    - Withdrawn
    type: string
    x-enum-varnames:
    - Saved
    - Applied
    - Interview
    - Offered
    - Rejected
    - Withdrawn
host: localhost:8080
info:
  contact: {}
  description: Automating resume and cover letter generation, allowing users to easily
    tailor their applications to specific job opportunities while highlighting their
    unique skills and experiences.
  title: Next Gen Job Hunting API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: Signin successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to generate token
          schema:
            additionalProperties: true
            type: object
      summary: Log in a user
      tags:
      - Auth
  /auth/signout:
    post:
      parameters:
      - description: Auth Token
        in: header
        name: auth_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Signout successful
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to signout
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Log out a user
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: Signup successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Register a new user
      tags:
      - Auth
  /jobposts:
    get:
      description: Get all job posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/jobpost.JobPost'
            type: array
        "500":
          description: Failed to retrieve job posts
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get all job posts
      tags:
      - jobpost
    post:
      consumes:
      - application/json
      description: Create a new job post
      parameters:
      - description: Job Post
        in: body
        name: jobPost
        required: true
        schema:
          $ref: '#/definitions/jobpost.JobPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/jobpost.JobPost'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to create job post
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Create a job post
      tags:
      - jobpost
    put:
      consumes:
      - application/json
      description: Update an existing job post
      parameters:
      - description: Job Post
        in: body
        name: jobPost
        required: true
        schema:
          $ref: '#/definitions/jobpost.JobPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jobpost.JobPost'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to update job post
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Update a job post
      tags:
      - jobpost
  /jobposts/{id}:
    delete:
      description: Delete a job post by ID
      parameters:
      - description: Job Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to delete job post
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Delete a job post
      tags:
      - jobpost
    get:
      description: Get a job post by its ID
      parameters:
      - description: Job Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jobpost.JobPost'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: Job post not found
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get a job post by ID
      tags:
      - jobpost
  /jobposts/search:
    get:
      description: Search job posts based on query parameters
      parameters:
      - description: Hirer name for filtering
        in: query
        name: hirer
        type: string
      - description: Eligibility flag
        in: query
        name: isEligible
        type: boolean
      - description: USA person requirement flag
        in: query
        name: isRequireUSAPerson
        type: boolean
      - description: Job application status filter
        enum:
        - Saved
        - Applied
        - Interview
        - Offered
        - Rejected
        - Withdrawn
        in: query
        name: jobApplicationStatus
        type: string
        x-enum-varnames:
        - Saved
        - Applied
        - Interview
        - Offered
        - Rejected
        - Withdrawn
      - description: JobPost ID for filtering
        in: query
        name: jobPostId
        type: integer
      - description: |-
          Number of items per page, default is 10
          in: query
          default: 10
        in: query
        name: limit
        type: integer
      - description: Job location filter
        in: query
        name: location
        type: string
      - description: |-
          Sort order (asc or desc), default is "asc"
          in: query
          default: asc
        in: query
        name: order
        type: string
      - description: |-
          Page number, default is 1
          in: query
          default: 1
        in: query
        name: page
        type: integer
      - description: |-
          Field to sort by, default is "id"
          in: query
          default: id
        in: query
        name: sortBy
        type: string
      - description: Total number of items
        in: query
        name: totalItems
        type: integer
      - description: User ID for filtering
        in: query
        name: userId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.PaginationData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/jobpost.JobPost'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to search job posts
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Search job posts
      tags:
      - jobpost
  /jobposts/status:
    put:
      consumes:
      - application/json
      description: Update the status of a job post
      parameters:
      - description: Update Job Post Status
        in: body
        name: updateUserJobPostDto
        required: true
        schema:
          $ref: '#/definitions/jobpost.JobPostUserJobPostDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jobpost.JobPostUserJobPostDto'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Failed to update job post status
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Update job post status
      tags:
      - jobpost
  /joburl:
    get:
      description: Get all job URLs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/joburl.JobUrl'
            type: array
        "500":
          description: Could not fetch job URLs
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get all job URLs
      tags:
      - joburl
    post:
      consumes:
      - application/json
      description: Create a new job URL for a user
      parameters:
      - description: Job URL
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/joburl.JobUrl'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/joburl.JobUrl'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Could not create Job URL
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Create a new job URL
      tags:
      - joburl
  /joburl/{id}:
    delete:
      description: Delete a job URL by its ID
      parameters:
      - description: Job URL ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Job URL deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: Job URL not found
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Could not delete Job URL
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Delete a job URL by ID
      tags:
      - joburl
    get:
      description: Get a job URL by its ID
      parameters:
      - description: Job URL ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/joburl.JobUrl'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: Job URL not found
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Could not fetch Job URL
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get a job URL by ID
      tags:
      - joburl
    put:
      consumes:
      - application/json
      description: Update a job URL by its ID
      parameters:
      - description: Job URL ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job URL
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/joburl.JobUrl'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/joburl.JobUrl'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Could not update Job URL
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Update a job URL by ID
      tags:
      - joburl
  /users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "400":
          description: Error occurred while retrieving users
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Service not initialized" "User not initialized" "Unable to
            create user
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Unable to delete user
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/exception.CommonException'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid user ID" "Invalid request payload
          schema:
            $ref: '#/definitions/exception.CommonException'
        "500":
          description: Unable to update user
          schema:
            $ref: '#/definitions/exception.CommonException'
      summary: Update a user by ID
      tags:
      - users
swagger: "2.0"
